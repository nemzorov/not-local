const dgram = require("dgram");
const notifier = require("node-notifier");

const PORT = 5005;
const BROADCAST_IP = "255.255.255.255";

// –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const from = "–ú–∞–∫—Å"; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—ë

// —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–≥
const colleagues = ["–ú–∞–∫—Å", "–ö–∞—Ç—è", "–û–ª–µ–≥", "–õ–µ–Ω–∞", "–°–µ—Ä–≥–µ–π", "–ò—Ä–∏–Ω–∞"];

// –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ —Å–µ—Ç–∏
const onlineUsers = {}; // { username: timeoutId }

function startReceiver() {
    const server = dgram.createSocket("udp4");

    server.on("message", (msg) => {
        try {
            const parsed = JSON.parse(msg.toString());
            const { type, from: sender, to, message } = parsed;

            // –ü–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å "—è –≤ —Å–µ—Ç–∏"
            if (type === "status") {

                if (!onlineUsers[sender]) {
                    addUserToUI(sender);
                }

                // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                clearTimeout(onlineUsers[sender]);
                onlineUsers[sender] = setTimeout(() => {
                    removeUserFromUI(sender);
                    delete onlineUsers[sender];
                }, 15000);
            }

            // –ü–æ–ª—É—á–∏–ª–∏ –ø–∏–Ω–≥
            if (type === "ping" && to === from) {
                console.log(`üì® –í—ã–∑–æ–≤ –æ—Ç ${sender}: ${message}`);
                notifier.notify({
                    title: `–í—ã–∑–æ–≤ –æ—Ç ${sender}`,
                    message: message || "–¢–µ–±—è –∑–æ–≤—É—Ç",
                    sound: true
                });
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
        }
    });

    server.bind(PORT, () => {
        console.log(`üéß –°–ª—É—à–∞—é –ø–æ—Ä—Ç ${PORT}...`);
    });
}

function sendMessage(payload) {
    const client = dgram.createSocket("udp4");

    const message = Buffer.from(JSON.stringify(payload));

    client.bind(() => {
        client.setBroadcast(true);
        client.send(message, 0, message.length, PORT, BROADCAST_IP, (err) => {
            if (err) console.error(err.message);
            client.close();
        });
    });
}

function broadcastStatus() {
    sendMessage({ type: "status", from });
}

function sendPing(to) {
    sendMessage({
        type: "ping",
        from,
        to,
        message: "–ü–æ–¥–æ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
    });
}

function notifyAll() {
    colleagues.forEach((name) => {
        if (name !== from) {
            sendPing(name);
        }
    });
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
window.addEventListener("DOMContentLoaded", () => {
    const userList = document.getElementById("online");
    const buttonsContainer = document.getElementById("buttons");

    startReceiver();
    setInterval(broadcastStatus, 5000); // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ "—è –≤ —Å–µ—Ç–∏"
    broadcastStatus(); // —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—Å–µ—Ö
    document.getElementById("notifyAll").onclick = () => notifyAll();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    colleagues.forEach((name) => {
        const btn = document.createElement("button");
        btn.id = `btn-${name}`;
        btn.disabled = name !== from ? true : false;

        updateButtonLabel(btn, name, name === from); // –µ—Å–ª–∏ —è —Å–∞–º ‚Äî —è —Ç–æ—á–Ω–æ online

        btn.onclick = () => {
            // if (name !== from) return; // –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–ø–æ–≤–µ—â–∞—Ç—å —Å–µ–±—è
            sendPing(name);
        };

        buttonsContainer.appendChild(btn);
    });

});

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function addUserToUI(name) {
    const btn = document.getElementById(`btn-${name}`);
    if (btn) {
        btn.disabled = false;
        updateButtonLabel(btn, name, true);
    }
}

function removeUserFromUI(name) {
    const btn = document.getElementById(`btn-${name}`);
    if (btn) {
        btn.disabled = true;
        updateButtonLabel(btn, name, false);
    }
}

function updateButtonLabel(button, name, isOnline) {
    const status = isOnline ? "üü¢ Online" : "‚ö´ Offline";
    button.textContent = `–ü–æ–∑–≤–∞—Ç—å ${name} ‚Äî ${status}`;
}
